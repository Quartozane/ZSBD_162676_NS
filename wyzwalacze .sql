DROP TABLE archive_departments CASCADE CONSTRAINTS;
CREATE TABLE archive_departments (
    department_id NUMBER,
    department_name VARCHAR2(30),
    data_zamkniecia DATE,
    ostatni_manager VARCHAR2(100)
);

CREATE OR REPLACE TRIGGER trg_archive_department
BEFORE DELETE ON departments
FOR EACH ROW
DECLARE
  v_manager_name VARCHAR2(100);
BEGIN
  SELECT first_name || ' ' || last_name
  INTO v_manager_name
  FROM employees
  WHERE id = :OLD.manager_id;

  INSERT INTO archive_departments (
    department_id,
    department_name,
    data_zamkniecia,
    ostatni_manager
  )
  VALUES (
    :OLD.department_id,
    :OLD.department_name,
    SYSDATE,
    v_manager_name
  );
END;
/


DROP TABLE zlodziej CASCADE CONSTRAINTS;
CREATE TABLE zlodziej (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50),
    change_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER trg_check_salary
BEFORE INSERT OR UPDATE ON employees
FOR EACH ROW
DECLARE
  v_user VARCHAR2(50);
BEGIN
  IF :NEW.salary < 2000 OR :NEW.salary > 26000 THEN
    SELECT USER INTO v_user FROM dual;
    INSERT INTO zlodziej (username) VALUES (v_user);
    RAISE_APPLICATION_ERROR(-20001, 'Wynagrodzenie poza zakresem');
  END IF;
END;
/

DROP SEQUENCE seq_emp_id;
CREATE SEQUENCE seq_emp_id START WITH 1000 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_emp_auto_id
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN
    :NEW.id := seq_emp_id.NEXTVAL;
  END IF;
END;
/

DROP TABLE jod_grades CASCADE CONSTRAINTS;
CREATE TABLE jod_grades (
  grade_id NUMBER,
  grade_name VARCHAR2(50)
);

CREATE OR REPLACE TRIGGER trg_block_jod_grades
BEFORE INSERT OR UPDATE OR DELETE ON jod_grades
BEGIN
  RAISE_APPLICATION_ERROR(-20002, 'Operacje na jod_grades zabronione');
END;
/

CREATE OR REPLACE TRIGGER trg_protect_salary_range
BEFORE UPDATE OF min_salary, max_salary ON jobs
FOR EACH ROW
BEGIN
  :NEW.min_salary := :OLD.min_salary;
  :NEW.max_salary := :OLD.max_salary;
END;
/
